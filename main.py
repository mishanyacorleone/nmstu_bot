import random
import torch.cuda
from fastapi import FastAPI, Request
import httpx
import uvicorn
from llama_cpp import Llama
from generator import generate_response
from rag import retrieve_documents
import os

app = FastAPI()

# –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã Jivo
current_dir = os.path.dirname(os.path.abspath(__file__))
MODEL_NAME = os.path.join(current_dir, 'RefalMachine/ruadapt_qwen2.5_7B_ext_u48_instruct_gguf/Q4_K_M.gguf')
BOT_TOKEN = "–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω Telegram Bot"
PROVIDER_ID = "–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Provider ID –æ—Ç Jivo"
JIVO_API_URL = f"https://bot.jivosite.com/webhooks/{PROVIDER_ID}/{BOT_TOKEN}"


@app.on_event("startup")
async def startup_event():
    global llm
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑: {MODEL_NAME}")
    llm = Llama(
        model_path=MODEL_NAME,
        n_ctx=8192,          # –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        n_gpu_layers=-1,     # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–∏ –Ω–∞ GPU
        seed=42,
        verbose=False,
        n_threads=4
    )
    print("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")


@app.post("/jivo-webhook/7605496089:AAE0-Xn_3jsw4yB0XZXzvPGGmyaf6x57Voc")
async def jivo_webhook(request: Request):
    data = await request.json()
    print("üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ Jivo:", data)

    event_type = data.get("event")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if event_type != "CLIENT_MESSAGE":
        return {"status": "ignored", "reason": f"–°–æ–±—ã—Ç–∏–µ {event_type} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"}

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ ID —á–∞—Ç–∞
    user_message = data.get("message", {}).get("text", "")
    chat_id = data.get("chat_id")
    client_id = data.get('client_id')

    if user_message and chat_id:
        if torch.cuda.is_available():
            torch.cuda.empty_cache()

        # –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        retrieved_docs = retrieve_documents(user_message) # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

        rag_response = ''
        for elem in retrieved_docs:
            print(f"–° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é: {elem['score']}\n"
                  f"–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —á–∞–Ω–∫–µ (corpus_id={elem['corpus_id']}):\n"
                  f"{elem['candidate']}\n\n")

            rag_response += f"{elem['candidate']}\n\n"
        try:
            response = generate_response(user_message, rag_response, llm)
        except Exception as ex:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {ex}")
            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."

        if torch.cuda.is_available():
            torch.cuda.empty_cache()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç Jivo
        payload = {
            'id': str(random.randint(1, 10000000)),
            "client_id": client_id,  # Client ID –∏–∑ —Å–æ–±—ã—Ç–∏—è CLIENT_MESSAGE
            'chat_id': chat_id, # Chat ID –∏–∑ —Å–æ–±—ã—Ç–∏—è CLIENT_MESSAGE
            "message": {
                "type": "TEXT",
                "text": response,
            },
            'event': 'BOT_MESSAGE'
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Jivo
        async with httpx.AsyncClient() as client:
            jivo_response = await client.post(JIVO_API_URL,
                                              json=payload,
                                              headers={"Content-Type": "application/json"})
            print("üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Jivo:", jivo_response.text)

    return {"status": "ok"}

if __name__ == "__main__":
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=False)